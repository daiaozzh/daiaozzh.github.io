<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sss</title>
      <link href="/2020/08/12/sss/"/>
      <url>/2020/08/12/sss/</url>
      
        <content type="html"><![CDATA[<h3 id="测试gitee上传"><a href="#测试gitee上传" class="headerlink" title="测试gitee上传"></a>测试gitee上传</h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2020/05/29/mysql/"/>
      <url>/2020/05/29/mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="连接远程数据库报错整理"><a href="#连接远程数据库报错整理" class="headerlink" title="连接远程数据库报错整理"></a>连接远程数据库报错整理</h3><p>很久没有写博客了，大概停了一个月，自从上班以来，貌似忘记了，自己还有博客</p><p>描述一下最近遇到连接服务器遇到的坑</p><h5 id="一-2003错误"><a href="#一-2003错误" class="headerlink" title="一 2003错误"></a>一 2003错误</h5><p><img src="https://img-blog.csdn.net/20180501173939247?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dhZ2V3YW5nMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="mark"></p><p>可能造成出现的原因：<br>1.网络不通畅<br>2.mysql 服务未启动<br>3.防火墙未开放端口</p><p>解决办法：</p><p>1.重启服务器mysql服务</p><p>2.去服务器安全策略组打开3306端口</p><h4 id="二-1045错误"><a href="#二-1045错误" class="headerlink" title="二 1045错误"></a>二 1045错误</h4><p><img src="https://img-blog.csdn.net/20180702154253475?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x6Zl9obGg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="mark"></p><p>用户“root”@本地主机的访问被拒绝</p><p>服务器数据库拒绝访问</p><p>解决办法：</p><p>打开宝塔找到Mysql服务，修改配置文件</p><p>打开后，找到mysqld这个位置，添加skip-grant-tables这一句，重启，搞定</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA 分布式 - 分布式介绍</title>
      <link href="/2020/04/13/fenbushi/"/>
      <url>/2020/04/13/fenbushi/</url>
      
        <content type="html"><![CDATA[<h2 id="JAVA-分布式-分布式介绍"><a href="#JAVA-分布式-分布式介绍" class="headerlink" title="JAVA 分布式 - 分布式介绍"></a>JAVA 分布式 - 分布式介绍</h2><p>最近做项目也逐渐了解到了分布式这一个概念，以前对于这几个字听到就感觉很可怕，毕竟这一概念比较高级，偶尔看到了一篇博客写的还不错，简洁明了的介绍了分布式这一概念，于是想着copy到了自己的博客里面，方便自己观看；</p><p>原文：<a href="https://blog.csdn.net/qq_40147863/article/details/84350344" target="_blank" rel="noopener">https://blog.csdn.net/qq_40147863/article/details/84350344</a></p><h3 id="什么是分布式系统？"><a href="#什么是分布式系统？" class="headerlink" title="什么是分布式系统？"></a>什么是分布式系统？</h3><p>要理解分布式系统，主要需要明白一下2个方面：</p><p>1.分布式系统一定是由多个节点组成的系统。<br>其中，节点指的是计算机服务器，而且这些节点一般不是孤立的，而是互通的。<br>2.这些连通的节点上部署了我们的节点，并且相互的操作会有协同。<br>分布式系统对于用户而言，他们面对的就是一个服务器，提供用户需要的服务而已，而实际上这些服务是通过背后的众多服务器组成的一个分布式系统，因此分布式系统看起来像是一个超级计算机一样。</p><p>例如淘宝，平时大家都会使用，它本身就是一个分布式系统，我们通过浏览器访问淘宝网站时，这个请求的背后就是一个庞大的分布式系统在为我们提供服务，整个系统中有的负责请求处理，有的负责存储，有的负责计算，最终他们相互协调把最后的结果返回并呈现给用户。<br><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200413/RebIVAof5xQt.png?imageslim" alt="mark"></p><h3 id="使用分布式系统主要有特点："><a href="#使用分布式系统主要有特点：" class="headerlink" title="使用分布式系统主要有特点："></a>使用分布式系统主要有特点：</h3><p>   1.增大系统容量。 我们的业务量越来越大，而要能应对越来越大的业务量，一台机器的性能已经无法满足了，我们需要多台机器才能应对大规模的应用场景。所以，我们需要垂直或是水平拆分业务系统，让其变成一个分布式的架构。</p><p>  2.加强系统可用。 我们的业务越来越关键，需要提高整个系统架构的可用性，这就意味着架构中不能存在单点故障。这样，整个系统不会因为一台机器出故障而导致整体不可用。所以，需要通过分布式架构来冗余系统以消除单点故障，从而提高系统的可用性。</p><p> 3.因为模块化，所以 <strong>系统模块重用度更高</strong></p><p> 4.因为软件服务模块被拆分，<strong>开发和发布速度可以并行而变得更快</strong></p><p> 5.<strong>系统扩展性更高</strong></p><p> 6.团队协作流程也会得到改善</p><h3 id="分布式系统的类型有三种："><a href="#分布式系统的类型有三种：" class="headerlink" title="分布式系统的类型有三种："></a>分布式系统的类型有三种：</h3><p> 1.分布式处理，但只有一个总数据库，没有局部数据库</p><p>  2.分层式处理，每一层都有自己的数据库</p><p>  3.充分分散的分布式网络，没有中央控制部分，各节点之间的联系方式又可以有多种，如松散的联接，紧密的联接，动态的联接，广播通知式的联接等</p><h3 id="什么是-JAVA-分布式应用？"><a href="#什么是-JAVA-分布式应用？" class="headerlink" title="什么是 JAVA 分布式应用？"></a>什么是 JAVA 分布式应用？</h3><p>一个大型的系统往往被分为几个子系统来做，一个子系统可以部署在一台机器的多个 JVM 上，也可以部署在多台机器上。但是每一个系统不是独立的，不是完全独立的。需要相互通信，共同实现业务功能。</p><p>一句话来说：分布式就是通过计算机网络将后端工作分布到多台主机上，多个主机一起协同完成工作。</p><h3 id="实现分布式主要的方式"><a href="#实现分布式主要的方式" class="headerlink" title="实现分布式主要的方式"></a>实现分布式主要的方式</h3><p>分布式应用用到的技术： 网络通信，基于消息方式的系统间通信和基于远程调用的系统间通信。</p><p>缺点： 就是会增加技术的复杂度。<br>基于消息的系统通信方式，主要是利用的网络协议，比如 TCP/IP 协议。<br>系统间的通信还需要对数据进行处理，比如同步 IO 和异步 IO。<br>远程调用实现系统间的通信:通过调用本地的java接口的方法来透明的调用远程java的实现。具体的细节有框架来实现。<br><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200413/CdiSNtVPuR5L.png?imageslim" alt="mark"></p><p>基于Java自身技术实现消息方式的系统间通信：<br>基于Java自身包实现消息方式的系统间通信的方式有：<br>TCP/IP+BIO、TCP/IP+NIO、UDP/IP+BIO以及UDP/IP+NIO 4种方式</p><p>TCP/IP+BIO 在 Java 中可基于 Socket、ServerSocket 来实现 TCP/IP+BIO 的系统间通信。</p><p>Socket 主要用于实现建立连接及网络 IO 的操作，ServerSocket 主要用于实现服务器端端口的监听及 Socket 对象的获取。</p><p>多个客户端访问服务器端的情况下，会遇到两个问题:建立多个 socket 的，占用过多的本地资源，服务器端要承受巨大的来访量；创建过多的 socket，占用过多的资源，影响性能。</p><p>通常解决这种问题的办法是，使用 连接池，既能限制连接的数量，又能避免创建的过程，可以很大的提高性的问题。缺点就是竞争量大的时候造成激烈的竞争和等待。需要注意的是，要设置超时时间，如果不这样的话，会造成无限制的等待。</p><p>为了解决这个问题，采用一连接一线程的方式，同时也会带来副作用，内存占用过多。<br>TCP/IP 异步通信: JAVA NIO 通道技术实现。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS</title>
      <link href="/2020/04/13/fastdfs/"/>
      <url>/2020/04/13/fastdfs/</url>
      
        <content type="html"><![CDATA[<h2 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h2><p>部分资料转载<a href="https://www.jianshu.com/p/b7c330a87855" target="_blank" rel="noopener">https://www.jianshu.com/p/b7c330a87855</a></p><p>FastDFS是一个开源的轻量级<a href="https://baike.so.com/doc/6591749-6805528.html" target="_blank" rel="noopener">分布式文件系统</a>，它对文件进行管理，功能包括:文件存储、文件同步、文件访问(文件上传、文件下载)等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><p>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>FastDFS服务端有两个角色:跟踪器(tracker)和存储<a href="https://baike.so.com/doc/5159597-5389889.html" target="_blank" rel="noopener">节点</a>(storage)。跟踪器主要做调度工作，在访问上起负载均衡的作用。</p><p>存储节点存储文件，完成文件管理的所有功能:就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对(key value)方式表示，如:width=1024，其中的key为width，value为1024。文件metadata是<a href="https://baike.so.com/doc/435261-460869.html" target="_blank" rel="noopener">文件属性</a>列表，可以包含多个键值对。</p><p>跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。</p><p>为了支持大容量，存储<a href="https://baike.so.com/doc/5159597-5389889.html" target="_blank" rel="noopener">节点</a>(服务器)采用了分卷(或分组)的组织方式。<a href="https://baike.so.com/doc/6261634-6475054.html" target="_blank" rel="noopener">存储系统</a>由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台<a href="https://baike.so.com/doc/1931476-2043399.html" target="_blank" rel="noopener">存储服务器</a>组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了<a href="https://baike.so.com/doc/8616462-8937444.html" target="_blank" rel="noopener">冗余备份</a>和负载均衡的作用。</p><p>在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。</p><p>当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了<a href="https://baike.so.com/doc/6261634-6475054.html" target="_blank" rel="noopener">存储系统</a>的容量。</p><p>FastDFS中的文件标识分为两个部分:卷名和文件名，二者缺一不可。</p><h4 id="客户端Client"><a href="#客户端Client" class="headerlink" title="客户端Client"></a>客户端Client</h4><p>主要是上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。每个客户端服务器都需要安装Nginx</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200413/kWjeIUWXLRso.png?imageslim" alt="fastDFS三方交互图"></p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h4 id="1写入操作"><a href="#1写入操作" class="headerlink" title="1写入操作"></a>1写入操作</h4><p>写操作的时候，storage会将他所挂载的所有数据存储目录的底下都创建2级子目录，每一级256个总共65536个，新写的文件会以hash的方式被路由到其中某个子目录下，然后将文件数据作为本地文件存储到该目录中。</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200413/eJbBtUIPrP3B.png?imageslim" alt="写操作fastDFS流程图"></p><h4 id="2-写入数据"><a href="#2-写入数据" class="headerlink" title="2.写入数据"></a>2.写入数据</h4><p>写操作的时候，storage会将他所挂载的所有数据存储目录的底下都创建2级子目录，每一级256个总共65536个，新写的文件会以hash的方式被路由到其中某个子目录下，然后将文件数据作为本地文件存储到该目录中。</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200413/OvxkH9NPb1eQ.png?imageslim" alt="写操作fastDFS流程图"></p><h4 id="FastDFS搭建"><a href="#FastDFS搭建" class="headerlink" title="FastDFS搭建"></a>FastDFS搭建</h4><p>(以最近做的商城为例子)</p><p>我们使用Docker搭建FastDFS的开发环境</p><p>拉取镜像 </p><pre><code class="java">docker pull morunchang/fastdfs</code></pre><p>运行tracker </p><pre><code class="java">docker run ‐d ‐‐name tracker ‐‐net=host morunchang/fastdfs sh tracker.sh</code></pre><p>运行storage </p><pre><code class="java">docker run ‐d ‐‐name storage ‐‐net=host ‐e TRACKER_IP=&lt;your tracker server address&gt;:22122 ‐e GROUP_NAME=&lt;group name&gt; morunchang/fastdfs sh storage.sh</code></pre><p>使用的网络模式是–net=host, 替换为你机器的Ip即可 </p><p>是组名，即storage的组 </p><p>如果想要增加新的storage服务器，再次运行该命令，注意更换 新组名</p><p>修改nginx的配置</p><p>进入storage的容器内部，修改nginx.conf</p><pre><code class="java">docker exec ‐it storage /bin/bash</code></pre><p>进入后</p><pre><code class="java">vi /data/nginx/conf/nginx.conf</code></pre><p>添加以下内容 </p><pre><code class="java">location /group1/M00 { proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_cache http‐cache; proxy_cache_valid 200 304 12h; proxy_cache_key $uri$is_args$args; proxy_pass http://fdfs_group1; expires 30d; }</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>通过做项目了解了这个FastDFS分布式开源框架，也逐渐了解到了分布式的作用，有了一个简单的认识，也是迈上高层次的程序员的一步，但是仅仅只是走出了一小步还需要不断的学习；</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马商城环境搭建</title>
      <link href="/2020/04/12/shangcheng/"/>
      <url>/2020/04/12/shangcheng/</url>
      
        <content type="html"><![CDATA[<h2 id="黑马商城环境搭建"><a href="#黑马商城环境搭建" class="headerlink" title="黑马商城环境搭建"></a>黑马商城环境搭建</h2><p>最近准备写的新项目，是黑马的一个商城案例，然后前几天也在捣鼓然后遇到了一个问题就准备放弃了，今晚想起不能就这么放弃，所以打算重新开始毕竟万事开头难，也希望自己早日写完这个项目，也从中学习到很多知识。</p><h3 id="一-项目介绍"><a href="#一-项目介绍" class="headerlink" title="一 项目介绍"></a>一 项目介绍</h3><p>1 页面介绍</p><p>网站前台静态原型演示，打开<code>资料\页面\前台\project-changgou-portal-fis3-master</code>，首页<code>index.html</code></p><p><img src="https://img-blog.csdnimg.cn/20200218111706977.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F6YzIwMTc=,size_16,color_FFFFFF,t_70" alt="img"></p><p>网站管理后台静态原型演示:<a href="http://czpm.itcast.cn/青橙后台/#g=1&amp;p=后台首页" target="_blank" rel="noopener">http://czpm.itcast.cn/青橙后台/#g=1&amp;p=后台首页</a></p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200412/M7jjIs0YVgBW.png?imageslim" alt="mark"></p><ol start="2"><li><p>技术架构</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200412/Adn5Dz9pnACd.png?imageslim" alt="mark"></p></li></ol><p>3.系统架构图</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200412/UgtwA23QBXD7.png?imageslim" alt="mark"></p><h3 id="二-环境搭建"><a href="#二-环境搭建" class="headerlink" title="二 环境搭建"></a>二 环境搭建</h3><p>1.虚拟机环境搭建</p><p>（1）VMware Workstation Pro安装centos7 镜像</p><p>（2）安装docker</p><p>（3）拉取mySQL镜像，并创建容器</p><p>（4）客户端连接mysql容器，建库建表（建库建表语句在资源文件夹中提供）</p><p>虚拟机数据：</p><ul><li>虚拟机IP:192.168.211.132</li><li>虚拟机账号：root 密码：123456</li><li>数据库端口:3306</li><li>数据库账号：root 密码：123456</li></ul><p>数据库脚本：<code>资料\数据库脚本</code></p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200412/U1QXaBjzFDnk.png?imageslim" alt="mark"></p><p>这里分享一个 遇到一个踩坑小经历，就是下载下来的虚拟机会连接不上ssh工具和navicat这里我找了很多博客，终于找到一个靠谱的<a href="https://blog.csdn.net/qq_45455361/article/details/104316395" target="_blank" rel="noopener">https://blog.csdn.net/qq_45455361/article/details/104316395</a></p><p>我也简单补充一下这篇博客的内容</p><p>资料：云盘连接 提取码：sb1m</p><p>拿到资料后，把里面虚拟机进行解压，然后用VMware虚拟机软件打开Centos-changgou.vmx，<br>然后打开，用户名:root,密码：123456。<br>里面后期用到的环境都已经安装好了，不需要我们浪费时间搭建环境。<br>接下来需要打开VMware-编辑-虚拟网络配置 打开NAT设置</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200412/YrQffQPle5iJ.png?imageslim" alt="mark"></p><p>然后点击NAT设置，修改IP</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200412/pjBTLiVqlKJV.png?imageslim" alt="mark"></p><p>接下来在CentOS终端中输入 vi /etc/sysconfig/network-scripts/ifcfg-ens33</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200412/ItwvGNCbimTv.png?imageslim" alt="mark"></p><p>注意这里的 dsn1设置自己的子网ip+1，ip设置192.168.xx.xx，倒数第二个xx要和本地的网关倒数第二个设置一样，网关也要设置的一样不然就会连不上，设置好之后，虚拟机就设置成功了<img src="http://q81vzntp5.bkt.clouddn.com/blog/20200412/wF62VB8IqWwn.png?imageslim" alt="mark"></p><p>这就是设置成功之后连上数据库，虚拟机的环境搭建就到这里了</p><h3 id="三-父工程搭建"><a href="#三-父工程搭建" class="headerlink" title="三 父工程搭建"></a>三 父工程搭建</h3><p>创建父工程 changgou-parent  ,pom.xml文件中增加配置</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.changgou&lt;/groupId&gt;    &lt;artifactId&gt;changgou-parent&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.1.4.RELEASE&lt;/version&gt;    &lt;/parent&gt;    &lt;properties&gt;        &lt;skipTests&gt;true&lt;/skipTests&gt;    &lt;/properties&gt;    &lt;!--依赖包--&gt;    &lt;dependencies&gt;        &lt;!--测试包--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!--fastjson--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;            &lt;version&gt;1.2.51&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--swagger文档--&gt;        &lt;dependency&gt;            &lt;groupId&gt;io.springfox&lt;/groupId&gt;            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;            &lt;version&gt;2.6.1&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;io.springfox&lt;/groupId&gt;            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;            &lt;version&gt;2.6.1&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--            http://localhost:9011/swagger-ui.html        --&gt;    &lt;/dependencies&gt;    &lt;dependencyManagement&gt;        &lt;dependencies&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;                &lt;version&gt;Greenwich.SR1&lt;/version&gt;                &lt;type&gt;pom&lt;/type&gt;                &lt;scope&gt;import&lt;/scope&gt;            &lt;/dependency&gt;        &lt;/dependencies&gt;    &lt;/dependencyManagement&gt;&lt;/project&gt;</code></pre><p>删除src文件夹</p><h4 id="3-3-2-其他公共模块搭建"><a href="#3-3-2-其他公共模块搭建" class="headerlink" title="3.3.2 其他公共模块搭建"></a>3.3.2 其他公共模块搭建</h4><p>创建changgou-gateway、changgou-service、changgou-service-api、changgou-web工程，工程全部为pom工程，并将所有工程的src文件删除。</p><p>pom.xml中打pom包</p><pre><code class="xml">&lt;packaging&gt;pom&lt;/packaging&gt;</code></pre><p>项目结构如下：</p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1564024579642.png" alt="1564024579642"></p><h3 id="3-4-Eureka微服务搭建"><a href="#3-4-Eureka微服务搭建" class="headerlink" title="3.4 Eureka微服务搭建"></a>3.4 Eureka微服务搭建</h3><h4 id="3-4-1-pom-xml依赖"><a href="#3-4-1-pom-xml依赖" class="headerlink" title="3.4.1 pom.xml依赖"></a>3.4.1 pom.xml依赖</h4><p>创建模块changgou-eureka ，pom.xml引入依赖 </p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;changgou_parent&lt;/artifactId&gt;        &lt;groupId&gt;com.changgou&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;changgou_eureka&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><h4 id="3-4-2-appliation-yml配置"><a href="#3-4-2-appliation-yml配置" class="headerlink" title="3.4.2 appliation.yml配置"></a>3.4.2 appliation.yml配置</h4><p>创建配置文件application.yml</p><pre><code class="yaml">server:  port: 7001eureka:  instance:    hostname: 127.0.0.1  client:    register-with-eureka: false   #是否将自己注册到eureka中    fetch-registry: false         #是否从eureka中获取信息    service-url:      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/</code></pre><h4 id="3-4-3-启动类配置"><a href="#3-4-3-启动类配置" class="headerlink" title="3.4.3 启动类配置"></a>3.4.3 启动类配置</h4><p>创建包com.changgou  包下创建启动类EurekaApplication，代码如下：</p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560411732580.png" alt="1560411732580"></p><p>上图代码如下：</p><pre><code class="Java">@SpringBootApplication@EnableEurekaServerpublic class EurekaApplication {    public static void main(String[] args) {        SpringApplication.run(EurekaApplication.class);    }}</code></pre><p>测试访问<code>http://localhost:7001/</code>,效果如下：</p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560412105435.png" alt="1560412105435"></p><h3 id="3-5-公共模块搭建"><a href="#3-5-公共模块搭建" class="headerlink" title="3.5 公共模块搭建"></a>3.5 公共模块搭建</h3><h4 id="3-5-1-pom-xml依赖"><a href="#3-5-1-pom-xml依赖" class="headerlink" title="3.5.1 pom.xml依赖"></a>3.5.1 pom.xml依赖</h4><p>创建公共子模块changgou-common，pom.xml引入依赖</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;changgou-parent&lt;/artifactId&gt;        &lt;groupId&gt;com.changgou&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;changgou-common&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;!--web起步依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!-- redis 使用--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!--eureka-client--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!--openfeign--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!--微信支付--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.github.wxpay&lt;/groupId&gt;            &lt;artifactId&gt;wxpay-sdk&lt;/artifactId&gt;            &lt;version&gt;0.0.3&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--httpclient支持--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>公共子模块引入这些依赖后，其他微服务引入changgou-common后也自动引入了这些依赖</p><h4 id="3-5-2-常用对象"><a href="#3-5-2-常用对象" class="headerlink" title="3.5.2 常用对象"></a>3.5.2 常用对象</h4><p>创建entity包 ，在entity包下创建返回状态码实体类==[StatusCode]==</p><pre><code class="java">/** * 返回码 */public class StatusCode {    public static final int OK = 20000;//成功    public static final int ERROR = 20001;//失败    public static final int LOGINERROR = 20002;//用户名或密码错误    public static final int ACCESSERROR = 20003;//权限不足    public static final int REMOTEERROR = 20004;//远程调用失败    public static final int REPERROR = 20005;//重复操作    public static final int NOTFOUNDERROR = 20006;//没有对应的抢购数据}</code></pre><p>包下建立类==Result==用于微服务返回结果给前端</p><pre><code class="java">/** * 返回结果实体类 */public class Result&lt;T&gt; {    private boolean flag;//是否成功    private Integer code;//返回码    private String message;//返回消息    private T data;//返回数据    public Result(boolean flag, Integer code, String message, Object data) {        this.flag = flag;        this.code = code;        this.message = message;        this.data = (T) data;    }    public Result(boolean flag, Integer code, String message) {        this.flag = flag;        this.code = code;        this.message = message;    }    public Result() {        this.flag = true;        this.code = StatusCode.OK;        this.message = &quot;操作成功!&quot;;    }    // getter and setter.....}</code></pre><p>在entity包下建立类用于承载分页的数据结果</p><pre><code class="java">/** * 分页结果类 */public class PageResult&lt;T&gt; {    private Long total;//总记录数    private List&lt;T&gt; rows;//记录    public PageResult(Long total, List&lt;T&gt; rows) {        this.total = total;        this.rows = rows;    }    public PageResult() {    }    //getter and setter ......}</code></pre><p>当然，我们还可以将其他工具类都一起倒入到工程中，以后会用到，将<code>资料\工具类</code>中的所有类直接导入到entity包下。</p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1564023015741.png" alt="1564023015741"></p><h3 id="3-6-数据访问工程搭建"><a href="#3-6-数据访问工程搭建" class="headerlink" title="3.6 数据访问工程搭建"></a>3.6 数据访问工程搭建</h3><p>创建公共模块changgou-common-db ，pom文件引入依赖</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;changgou-parent&lt;/artifactId&gt;        &lt;groupId&gt;com.changgou&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;changgou-common-db&lt;/artifactId&gt;    &lt;!--依赖--&gt;    &lt;dependencies&gt;        &lt;!--对changgou-common的依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.changgou&lt;/groupId&gt;            &lt;artifactId&gt;changgou-common&lt;/artifactId&gt;            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--通用mapper起步依赖--&gt;        &lt;dependency&gt;            &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;2.0.4&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--MySQL数据库驱动--&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!--mybatis分页插件--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;1.2.3&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>这个公共模块是连接mysql数据库的公共微服务模块，所以需要连接mysql的微服务都继承自此工程。</p><h3 id="3-7-商品微服务搭建"><a href="#3-7-商品微服务搭建" class="headerlink" title="3.7 商品微服务搭建"></a>3.7 商品微服务搭建</h3><p>商品微服务主要是实现对商品的增删改查相关操作，以及商品相关信息的增删改查。</p><h4 id="3-7-1-公共组件工程搭建"><a href="#3-7-1-公共组件工程搭建" class="headerlink" title="==3.7.1 公共组件工程搭建=="></a>==3.7.1 公共组件工程搭建==</h4><p>创建changgou-service-api子模块changgou-service-goods-api，并将<code>资料\javabean\changgou-service-goods-api</code>中的Pojo导入到工程中。</p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560416099767.png" alt="1560416099767"></p><p>修改父工程changgou-service-api的pom.xml，添加<code>persistence-api</code>和<code>changgou-common</code>的依赖，代码如下：</p><pre><code class="xml">&lt;dependencies&gt;    &lt;!--通用的common--&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.changgou&lt;/groupId&gt;        &lt;artifactId&gt;changgou-common&lt;/artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--每个工程都有Pojo，都需要用到该包对应的注解--&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.persistence&lt;/groupId&gt;        &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;        &lt;version&gt;1.0&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h4 id="3-7-2-微服务工程搭建"><a href="#3-7-2-微服务工程搭建" class="headerlink" title="3.7.2 微服务工程搭建"></a>3.7.2 微服务工程搭建</h4><p>修改changgou-service的pom.xml引入<code>changgou-common-db</code>的依赖，代码如下：</p><pre><code class="xml">&lt;!--依赖--&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.changgou&lt;/groupId&gt;        &lt;artifactId&gt;changgou-common-db&lt;/artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>在changgou-service中创建changgou-service-goods ，pom.xml引入依赖 </p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;changgou-service&lt;/artifactId&gt;        &lt;groupId&gt;com.changgou&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;changgou-service-goods&lt;/artifactId&gt;    &lt;!--依赖--&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.changgou&lt;/groupId&gt;            &lt;artifactId&gt;changgou-service-goods-api&lt;/artifactId&gt;            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>在resources下创建配置文件application.yml</p><pre><code class="yaml">server:  port: 18081spring:  application:    name: goods  datasource:    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://192.168.211.132:3306/changgou_goods?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC    username: root    password: 123456eureka:  client:    service-url:      defaultZone: http://127.0.0.1:7001/eureka  instance:    prefer-ip-address: truefeign:  hystrix:    enabled: truemybatis:  configuration:    map-underscore-to-camel-case: true  mapper-locations: classpath:mapper/*Mapper.xml  type-aliases-package: com.changgou.goods.pojo</code></pre><p>在包com.changgou.goods 包下创建启动类GoodsApplication，代码如下：</p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560416869439.png" alt="1560416869439"></p><p>上图代码如下：</p><pre><code class="JAVA">@SpringBootApplication@EnableEurekaClient@MapperScan(basePackages = {&quot;com.changgou.goods.dao&quot;})public class GoodsApplication {    public static void main(String[] args) {        SpringApplication.run(GoodsApplication.class);    }}</code></pre><p><strong><em>注意</em></strong> ：@MapperScan是<code>tk.mybatis.spring.annotation</code>包下的，用于扫描==Mapper==接口</p><p>启动<code>changgou-service-goods</code> 再访问<code>&lt;http://localhost:7001/&gt;</code>效果如下：</p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1564037101313.png" alt="1564037101313"></p><h2 id="4-商品微服务-品牌增删改查"><a href="#4-商品微服务-品牌增删改查" class="headerlink" title="==4 商品微服务-品牌增删改查=="></a>==4 商品微服务-品牌增删改查==</h2><h3 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h3><p>创建商品微服务，实现对品牌表的增删改查功能。具体包括</p><p>（1）查询全部列表数据</p><p>（2）根据ID查询实体数据</p><p>（3）增加</p><p>（4）修改</p><p>（5）删除</p><p>（6）条件查询</p><p>（7）分页查询</p><p>（8）分页+条件查询</p><p>（9）公共异常处理</p><h3 id="4-2-表结构分析"><a href="#4-2-表结构分析" class="headerlink" title="4.2 表结构分析"></a>4.2 表结构分析</h3><p>品牌表：tb_brand</p><table><thead><tr><th>字段名称</th><th>字段含义</th><th>字段类型</th><th>字段长度</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>品牌id</td><td>INT</td><td></td><td></td></tr><tr><td>name</td><td>品牌名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>image</td><td>品牌图片地址</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>letter</td><td>品牌的首字母</td><td>CHAR</td><td></td><td></td></tr><tr><td>seq</td><td>排序</td><td>INT</td><td></td><td></td></tr></tbody></table><h3 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h3><p>上面品牌表对应Brand实体类</p><pre><code class="java">@Table(name=&quot;tb_brand&quot;)public class Brand implements Serializable{    @Id    private Integer id;//品牌id    private String name;//品牌名称    private String image;//品牌图片地址    private String letter;//品牌的首字母    private Integer seq;//排序    // getter and setter  .....(省略)}</code></pre><p>@Table和@Id都是JPA注解，@Table用于配置表与实体类的映射关系，@Id用于标识主键属性。</p><h4 id="4-3-1-品牌列表"><a href="#4-3-1-品牌列表" class="headerlink" title="4.3.1 品牌列表"></a>4.3.1 品牌列表</h4><p>(1)Dao创建</p><p>在changgou-service-goods微服务下创建com.changgou.goods.dao.BrandMapper接口，代码如下：</p><pre><code class="java">public interface BrandMapper extends Mapper&lt;Brand&gt; {}</code></pre><p>继承了Mapper接口，就自动实现了增删改查的常用方法。</p><p>(2)业务层</p><p>创建com.changgou.goods.service.BrandService接口，代码如下：</p><pre><code class="java">public interface BrandService {    /***     * 查询所有品牌     * @return     */    List&lt;Brand&gt; findAll();}</code></pre><p>创建com.changgou.goods.service.impl.BrandServiceImpl实现类，代码如下：</p><pre><code class="java">@Servicepublic class BrandServiceImpl {    @Autowired    private BrandMapper brandMapper;    /**     * 全部数据     * @return     */    public List&lt;Brand&gt; findAll(){        return brandMapper.selectAll();    }}</code></pre><p>(3)控制层</p><p>控制层  com.changgou.goods包下创建controller包  ，包下创建类</p><pre><code class="java">@RestController@RequestMapping(&quot;/brand&quot;)public class BrandController {    @Autowired    private BrandService brandService;    /***     * 查询全部数据     * @return     */    @GetMapping    public Result&lt;Brand&gt; findAll(){        List&lt;Brand&gt; brandList = brandService.findAll();        return new Result&lt;Brand&gt;(true, StatusCode.OK,&quot;查询成功&quot;,brandList) ;    }}</code></pre><p>测试：<a href="http://localhost:18081/brand" target="_blank" rel="noopener">http://localhost:18081/brand</a></p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560443629855.png" alt="1560443629855"></p><h4 id="4-3-2-根据ID查询品牌"><a href="#4-3-2-根据ID查询品牌" class="headerlink" title="4.3.2 根据ID查询品牌"></a>4.3.2 根据ID查询品牌</h4><p>(1)业务层</p><p>修改com.changgou.goods.service.BrandService接口，添加根据ID查询品牌数据方法，代码如下：</p><pre><code class="java">/** * 根据ID查询 * @param id * @return */Brand findById(Integer id);</code></pre><p>修改com.changgou.goods.service.impl.BrandServiceImpl新增方法，代码如下：</p><pre><code class="java">/** * 根据ID查询 * @param id * @return */@Overridepublic Brand findById(Integer id){    return  brandMapper.selectByPrimaryKey(id);}</code></pre><p>(2)控制层</p><p>BrandController新增方法</p><pre><code class="java">/*** * 根据ID查询品牌数据 * @param id * @return */@GetMapping(&quot;/{id}&quot;)public Result&lt;Brand&gt; findById(@PathVariable Integer id){    //根据ID查询    Brand brand = brandService.findById(id);    return new Result&lt;Brand&gt;(true,StatusCode.OK,&quot;查询成功&quot;,brand);}</code></pre><p>测试：<a href="http://localhost:18081/brand/14026" target="_blank" rel="noopener">http://localhost:18081/brand/14026</a></p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560443736710.png" alt="1560443736710"></p><h4 id="4-3-3-新增品牌"><a href="#4-3-3-新增品牌" class="headerlink" title="4.3.3 新增品牌"></a>4.3.3 新增品牌</h4><p>(1)业务层</p><p>修改com.changgou.goods.service.BrandService，新增方法</p><pre><code class="java">/*** * 新增品牌 * @param brand */void add(Brand brand);</code></pre><p>修改com.changgou.goods.service.impl.BrandServiceImpl，新增增加品牌方法代码如下：</p><pre><code class="java">/** * 增加 * @param brand */@Overridepublic void add(Brand brand){    brandMapper.insert(brand);}</code></pre><p>(2) 控制层</p><p>BrandController新增方法</p><pre><code class="java">/*** * 新增品牌数据 * @param brand * @return */@PostMappingpublic Result add(@RequestBody Brand brand){    brandService.add(brand);    return new Result(true,StatusCode.OK,&quot;添加成功&quot;);}</code></pre><p>测试：<a href="http://localhost:18081/brand" target="_blank" rel="noopener">http://localhost:18081/brand</a></p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560443988970.png" alt="1560443988970"></p><h4 id="4-3-4-修改品牌"><a href="#4-3-4-修改品牌" class="headerlink" title="4.3.4 修改品牌"></a>4.3.4 修改品牌</h4><p>(1)业务层</p><p>需改com.changgou.goods.service.BrandService,添加修改品牌方法，代码如下：</p><pre><code class="java">/*** * 修改品牌数据 * @param brand */void update(Brand brand);</code></pre><p>修改com.changgou.goods.service.impl.BrandServiceImpl，添加修改品牌方法，代码如下：</p><pre><code class="java">/** * 修改 * @param brand */@Overridepublic void update(Brand brand){    brandMapper.updateByPrimaryKey(brand);}</code></pre><p>(2)控制层</p><p>BrandController新增方法</p><pre><code class="java">/*** * 修改品牌数据 * @param brand * @param id * @return */@PutMapping(value=&quot;/{id}&quot;)public Result update(@RequestBody Brand brand,@PathVariable Integer id){    //设置ID    brand.setId(id);    //修改数据    brandService.update(brand);    return new Result(true,StatusCode.OK,&quot;修改成功&quot;);}</code></pre><p>测试：<a href="http://localhost:18081/brand/325415" target="_blank" rel="noopener">http://localhost:18081/brand/325415</a></p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560444209790.png" alt="1560444209790"></p><h4 id="4-3-5-删除品牌"><a href="#4-3-5-删除品牌" class="headerlink" title="4.3.5 删除品牌"></a>4.3.5 删除品牌</h4><p>(1)业务层</p><p>修改com.changgou.goods.service.BrandService，添加删除品牌方法，代码如下：</p><pre><code class="java">/*** * 删除品牌 * @param id */void delete(Integer id);</code></pre><p>修改com.changgou.goods.service.impl.BrandServiceImpl，新增删除品牌方法，代码如下：</p><pre><code class="java">/** * 删除 * @param id */@Overridepublic void delete(Integer id){    brandMapper.deleteByPrimaryKey(id);}</code></pre><p>(2)控制层</p><p>BrandController新增方法</p><pre><code class="java">/*** * 根据ID删除品牌数据 * @param id * @return */@DeleteMapping(value = &quot;/{id}&quot; )public Result delete(@PathVariable Integer id){    brandService.delete(id);    return new Result(true,StatusCode.OK,&quot;删除成功&quot;);}</code></pre><p>测试：<a href="http://localhost:18081/brand/325415" target="_blank" rel="noopener">http://localhost:18081/brand/325415</a></p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560444351992.png" alt="1560444351992"></p><h4 id="4-3-6-品牌列表条件查询"><a href="#4-3-6-品牌列表条件查询" class="headerlink" title="4.3.6 品牌列表条件查询"></a>4.3.6 品牌列表条件查询</h4><p>(1)业务层</p><p>修改com.changgou.goods.service.BrandService，增加根据条件搜索品牌方法，代码如下：</p><pre><code class="java">/*** * 多条件搜索品牌方法 * @param brand * @return */List&lt;Brand&gt; findList(Brand brand);</code></pre><p>修改com.changgou.goods.service.impl.BrandServiceImpl，添加根据多条件搜索品牌方法的实现，代码如下：</p><pre><code class="java">/** * 条件查询 * @param brand * @return */@Overridepublic List&lt;Brand&gt; findList(Brand brand){    //构建查询条件    Example example = createExample(brand);    //根据构建的条件查询数据    return brandMapper.selectByExample(example);}/** * 构建查询对象 * @param brand * @return */public Example createExample(Brand brand){    Example example=new Example(Brand.class);    Example.Criteria criteria = example.createCriteria();    if(brand!=null){        // 品牌名称        if(!StringUtils.isEmpty(brand.getName())){            criteria.andLike(&quot;name&quot;,&quot;%&quot;+brand.getName()+&quot;%&quot;);        }        // 品牌图片地址        if(!StringUtils.isEmpty(brand.getImage())){            criteria.andLike(&quot;image&quot;,&quot;%&quot;+brand.getImage()+&quot;%&quot;);        }        // 品牌的首字母        if(!StringUtils.isEmpty(brand.getLetter())){            criteria.andLike(&quot;letter&quot;,&quot;%&quot;+brand.getLetter()+&quot;%&quot;);        }        // 品牌id        if(!StringUtils.isEmpty(brand.getLetter())){            criteria.andEqualTo(&quot;id&quot;,brand.getId());        }        // 排序        if(!StringUtils.isEmpty(brand.getSeq())){            criteria.andEqualTo(&quot;seq&quot;,brand.getSeq());        }    }    return example;}</code></pre><p>(2) 控制层</p><p>BrandController新增方法</p><pre><code class="java">/*** * 多条件搜索品牌数据 * @param brand * @return */@PostMapping(value = &quot;/search&quot; )public Result&lt;List&lt;Brand&gt;&gt; findList(@RequestBody(required = false) Brand brand){    List&lt;Brand&gt; list = brandService.findList(brand);    return new Result&lt;List&lt;Brand&gt;&gt;(true,StatusCode.OK,&quot;查询成功&quot;,list);}</code></pre><p>测试：<a href="http://localhost:18081/brand/search" target="_blank" rel="noopener">http://localhost:18081/brand/search</a></p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560445027032.png" alt="1560445027032"></p><h4 id="4-3-7-品牌列表分页查询"><a href="#4-3-7-品牌列表分页查询" class="headerlink" title="4.3.7 品牌列表分页查询"></a>4.3.7 品牌列表分页查询</h4><p>(1)业务层</p><p>修改com.changgou.goods.service.BrandService添加分页方法，代码如下：</p><pre><code class="java">/*** * 分页查询 * @param page * @param size * @return */PageInfo&lt;Brand&gt; findPage(int page, int size);</code></pre><p>修改com.changgou.goods.service.impl.BrandServiceImpl添加分页方法实现，代码如下：</p><pre><code class="java">/** * 分页查询 * @param page * @param size * @return */@Overridepublic PageInfo&lt;Brand&gt; findPage(int page, int size){    //静态分页    PageHelper.startPage(page,size);    //分页查询    return new PageInfo&lt;Brand&gt;(brandMapper.selectAll());}</code></pre><p>(2)控制层</p><p>BrandController新增方法</p><pre><code class="java">/*** * 分页搜索实现 * @param page:当前页 * @param size:每页显示多少条 * @return */@GetMapping(value = &quot;/search/{page}/{size}&quot; )public Result&lt;PageInfo&gt; findPage(@PathVariable  int page, @PathVariable  int size){    //分页查询    PageInfo&lt;Brand&gt; pageInfo = brandService.findPage(page, size);    return new Result&lt;PageInfo&gt;(true,StatusCode.OK,&quot;查询成功&quot;,pageInfo);}</code></pre><p>测试：<a href="http://localhost:18081/brand/search/1/3" target="_blank" rel="noopener">http://localhost:18081/brand/search/1/3</a></p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560446429340.png" alt="1560446429340"></p><h4 id="4-3-8-品牌列表条件-分页查询"><a href="#4-3-8-品牌列表条件-分页查询" class="headerlink" title="4.3.8 品牌列表条件+分页查询"></a>4.3.8 品牌列表条件+分页查询</h4><p>(1)业务层</p><p>修改com.changgou.goods.service.BrandService，增加多条件分页查询方法，代码如下：</p><pre><code class="java">/*** * 多条件分页查询 * @param brand * @param page * @param size * @return */PageInfo&lt;Brand&gt; findPage(Brand brand, int page, int size);</code></pre><p>修改com.changgou.goods.service.impl.BrandServiceImpl，添加多条件分页查询方法代码如下：</p><pre><code class="java">/** * 条件+分页查询 * @param brand 查询条件 * @param page 页码 * @param size 页大小 * @return 分页结果 */@Overridepublic PageInfo&lt;Brand&gt; findPage(Brand brand, int page, int size){    //分页    PageHelper.startPage(page,size);    //搜索条件构建    Example example = createExample(brand);    //执行搜索    return new PageInfo&lt;Brand&gt;(brandMapper.selectByExample(example));}</code></pre><p>(2)控制层</p><p>BrandController新增方法</p><pre><code class="java">/*** * 分页搜索实现 * @param brand * @param page * @param size * @return */@PostMapping(value = &quot;/search/{page}/{size}&quot; )public Result&lt;PageInfo&gt; findPage(@RequestBody(required = false) Brand brand, @PathVariable  int page, @PathVariable  int size){    //执行搜索    PageInfo&lt;Brand&gt; pageInfo = brandService.findPage(brand, page, size);    return new Result(true,StatusCode.OK,&quot;查询成功&quot;,pageInfo);}</code></pre><p>测试：<a href="http://localhost:18081/brand/search/1/3" target="_blank" rel="noopener">http://localhost:18081/brand/search/1/3</a></p><p><img src="F:/%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%96%99/image/1560446545220.png" alt="1560446545220"></p><h4 id="4-3-9-公共异常处理"><a href="#4-3-9-公共异常处理" class="headerlink" title="4.3.9 公共异常处理"></a>4.3.9 公共异常处理</h4><p>为了使我们的代码更容易维护，我们创建一个类集中处理异常,该异常类可以创建在changgou-common工程中，创建com.changgou.framework.exception.BaseExceptionHandler，代码如下：</p><pre><code class="java">@ControllerAdvicepublic class BaseExceptionHandler {    /***     * 异常处理     * @param e     * @return     */    @ExceptionHandler(value = Exception.class)    @ResponseBody    public Result error(Exception e) {        e.printStackTrace();        return new Result(false, StatusCode.ERROR, e.getMessage());    }}</code></pre><p>注意：@ControllerAdvice注解，全局捕获异常类，只要作用在@RequestMapping上，所有的异常都会被捕获。</p><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>经过四个小时的学习环境已经搭建起来，实现了品牌的增删改查功能，收获了：解了微服务项目，知道了Eureka,但是具体是什么还不是太了解，也了解了前后分离的开发模式纯数据交换式的体验。嗯，顶不住了，三点到现在6个小时了</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200412/b0VebN099Mp1.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的下载，安装，与配置整合idea</title>
      <link href="/2020/04/09/mavenaz/"/>
      <url>/2020/04/09/mavenaz/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven的下载，安装，与配置整合idea"><a href="#Maven的下载，安装，与配置整合idea" class="headerlink" title="Maven的下载，安装，与配置整合idea"></a>Maven的下载，安装，与配置整合idea</h2><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/AgzNyarvW8cM.png?imageslim" alt="mark"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Apache Maven是一个软件项目管理和综合工具。基于项目对象模型（POM）的概念，<a href="http://www.yiibai.com/maven" target="_blank" rel="noopener">Maven</a>可以从一个中心资料片管理项目构建，报告和文件。本教程将介绍如何使用Maven在Java开发，或任何其他的编程语言的任何项目。</p><h3 id="一-Maven是什么"><a href="#一-Maven是什么" class="headerlink" title="一 Maven是什么"></a>一 Maven是什么</h3><p>Maven是一个项目管理和综合工具。<a href="http://www.yiibai.com/maven" target="_blank" rel="noopener">Maven</a>提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。</p><p>​    在多个开发团队环境时，Maven可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。</p><p>​    Maven提供了开发人员的方式来管理：</p><ul><li>​            Builds     </li><li>​            Documentation     </li><li>​            Reporting     </li><li>​            Dependencies     </li><li>​            SCMs     </li><li>​            Releases     </li><li>​            Distribution     </li><li>​            mailing list     </li></ul><p>​    概括地说，Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。</p><h3 id="二-Maven的安装与配置"><a href="#二-Maven的安装与配置" class="headerlink" title="二 Maven的安装与配置"></a>二 Maven的安装与配置</h3><p>Maven下载</p><p>下载地址：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/7AT7DkyeLwjn.png?imageslim" alt="mark"></p><p>下载后，解压得到</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/4ikkEvsRIR7E.png?imageslim" alt="mark"></p><p>Maven目录分析：</p><p>bin文件夹：含有mvn运行的脚本</p><p>boot文件夹：含有plexus-吃辣爽死我rlds类加载器框架</p><p>conf文件夹：含有settings.xml配置文件</p><p>lib文件夹：含有maven运行时所需要的java类库</p><p>maven安装</p><p>1.确认电脑上已经安装了JDK</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/1FDB2BziaAvA.png?imageslim" alt="mark"></p><p>2.环境变量的配置</p><p>（1）新建环境变量MAVEN_HOME</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/le5anzdq47hW.png?imageslim" alt="mark"></p><p>（2）设置环境变量Path</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/fbUcCt1JFnVn.png?imageslim" alt="mark"></p><p>编辑Path，增加“%MAVEN_HOME%\bin”</p><p>（3）新建环境变量MAVEN_OPTS</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/UD7La4wuSitK.png?imageslim" alt="mark"></p><p>通常需要设置MAVEN_OPTS的值为-Xms128m -Xmx512m，因为Java默认的最大可用内存往往不能够满足Maven运行的需要，比如在项目较大时，使用Maven生成项目站点需要占用大量的内存，如果没有该配置，则很容易得到java.lang.OutOfMemeoryError。</p><p>3.验证MAVEN安装成功</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/1OwNH5P6Gk5C.png?imageslim" alt="mark"></p><h3 id="三-maven设置本地仓库及其阿里云"><a href="#三-maven设置本地仓库及其阿里云" class="headerlink" title="三  maven设置本地仓库及其阿里云"></a>三  maven设置本地仓库及其阿里云</h3><p>1.在刚才MAVEN解压完成的地方，新建一个文件夹 repository（也可以叫别的，比如：rep）该目录用作MAVEN的本地库。</p><p>2.找到setting.xml文件。E:\maven\apache-maven\conf\settings.xml<br>查找一下代码：（可以直接复制，然后ctrl+F—&gt;ctrl+V直接查询）</p><pre><code class="java">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></pre><p>3.将MAVEN镜像路径为阿里镜像，以便下载速度快，每更新一次镜像地址，都会重新下载一次包（这一步可以不用设置，可以忽略）<br>还是在setting.xml文件中<br>查找一下代码：（可以直接复制，然后ctrl+F—&gt;ctrl+V直接查询）</p><pre><code class="java">    &lt;mirror&gt;      &lt;id&gt;alimaven&lt;/id&gt;      &lt;name&gt;aliyun maven&lt;/name&gt;      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;            &lt;/mirror&gt;</code></pre><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/Tos6jRJ44mgu.png?imageslim" alt="mark"></p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/lM5TDBlCujq6.png?imageslim" alt="mark"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>以上就是maven的安装，配置及其整合idea的使用方法</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java环境变量的安装</title>
      <link href="/2020/04/09/javahjbl/"/>
      <url>/2020/04/09/javahjbl/</url>
      
        <content type="html"><![CDATA[<h2 id="java环境变量的配置"><a href="#java环境变量的配置" class="headerlink" title="java环境变量的配置"></a>java环境变量的配置</h2><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/nllXobWLu9Kz.png?imageslim" alt="mark"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>貌似很久没有更新自己的博客了，最近的学习貌似有点偷懒这样下去可不行，只从上次电脑重装系统之后什么都没有有了，今天打算全部重装一遍吧正好练练手，先从最简单安装环境变量开始吧，毕竟环境变量是开始java开发的基础，也是对自己一些知识的积累吧；</p><h4 id="一-下载jdk"><a href="#一-下载jdk" class="headerlink" title="一 下载jdk"></a>一 下载jdk</h4><p>1.一般是去官网下载自己电脑型号相对应的版本下载</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>2.幸好重装系统只是重装C盘 以前的jdk版本还没有删除（手动滑稽）</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/MI1VutFmpFOC.png?imageslim" alt="mark"></p><h4 id="二-安装jdk"><a href="#二-安装jdk" class="headerlink" title="二 安装jdk"></a>二 安装jdk</h4><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/6OGI7QfxXYT3.png?imageslim" alt="mark"></p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/Rmv2DY2rwW9T.png?imageslim" alt="mark"></p><p>这里 要注意你安装的地方你要记住，个人建议不要安装在C盘</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/MPh9waKejQEa.png?imageslim" alt="mark"></p><p>然后就是等待</p><h4 id="三-配置环境变量"><a href="#三-配置环境变量" class="headerlink" title="三 配置环境变量"></a>三 配置环境变量</h4><p>a、新建 JAVA_HOME 环境变量，JAVA_HOME=C:\Java\jdk1.8.0_144</p><p>b、修改 path 环境变量，在path变量尾部添加%JAVA_HOME%\bin</p><p>1，“计算机” -&gt; 右键 -&gt; 属性 打开》环境变量</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/OmuWDzXqipsS.png?imageslim" alt="mark"></p><p>2，添加环境变量</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/9eG9I3zRoQJj.png?imageslim" alt="mark"></p><p>找到 path 变量，点击“编辑”</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/zYC8mBlpelHK.png?imageslim" alt="mark"></p><h4 id="四-验证环境变量"><a href="#四-验证环境变量" class="headerlink" title="四 验证环境变量"></a>四 验证环境变量</h4><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/5UOuEzMyCcIO.png?imageslim" alt="mark"></p><p>出现以下就是安装成功了</p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/NfsJ0xWE5gTe.png?imageslim" alt="mark"></p><p><img src="http://q81vzntp5.bkt.clouddn.com/blog/20200408/72tujtEgfyhu.png?imageslim" alt="mark"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>以上就是jdk的所有安装教程了</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑苹果安装教程</title>
      <link href="/2020/03/24/hpgfx/"/>
      <url>/2020/03/24/hpgfx/</url>
      
        <content type="html"><![CDATA[<h2 id="安装黑苹果教程"><a href="#安装黑苹果教程" class="headerlink" title="安装黑苹果教程"></a>安装黑苹果教程</h2><p>突然想写这样这样的一个教程，不为别的就是真的香，也是记录下来以防自己给整忘了,接下整合网上找的博客和自己遇到解决问题的分享：<a href="https://blog.csdn.net/mxw2552261/article/details/85815981" target="_blank" rel="noopener">原文地址</a>；</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584990835360&di=bd5fce4b5912db2a5011463a9558c2f5&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn10%2F549%2Fw768h581%2F20180820%2F30af-hhxaafz0158851.png" alt="img"></p><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p>1、一个U盘</p><p>2、电脑</p><p>3、工具包及镜像以及EFI合集（基本在网上寻找基本都能找到属于自己电脑的）</p><h3 id="二、制作镜像前的准备工作"><a href="#二、制作镜像前的准备工作" class="headerlink" title="二、制作镜像前的准备工作"></a>二、制作镜像前的准备工作</h3><p>安装mac系统最重要的就是找到与你的电脑合适的EFI配置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNjZSMEdVY2tFcTFZN0lpY0N4bERvZlRkRDZVdlFzenRZeU0wVlZ2eXhTY0JjTlB4ZDVwZTliT29QUFJ0SmliemJacGljeHRJc0g4c2RHUS82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNjZSMEdVY2tFcTFZN0lpY0N4bERvZlRLNEpCUjBwdkJyMmVDVE9qRjNIYU93Q3ZYUENzbjJaS0QyMENpYkswa0VPUTlqbHZtY2NqMWFnLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><h3 id="三、制作mac镜像u盘"><a href="#三、制作mac镜像u盘" class="headerlink" title="三、制作mac镜像u盘"></a>三、制作mac镜像u盘</h3><p>1、打开工具包中的transmac软件</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNjZSMEdVY2tFcTFZN0lpY0N4bERvZlR5OEJpYzFkZXM2YjNQeUpVb01oQ05Pa3RlM3NiOW9FRjdpYnFkeUJubHlpYmFDMFZJZlVOckxqVFEvNjQwP3d4X2ZtdD1wbmc?x-oss-process=image/format,png" alt="img"></p><p>界面如下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNjZSMEdVY2tFcTFZN0lpY0N4bERvZlRZODRrMnhMdE56bjJnVWdsMW44QUdpYUNERWFPRXljU1FpYWFiNW9QdXA0bmliUmRKUU9qcFpLUlEvNjQwP3d4X2ZtdD1wbmc?x-oss-process=image/format,png" alt="img"></p><p>点击你的u盘 然后选择 format Disk for mac </p><p>稍等片刻然后再点击 restore with Disk image </p><p>选择下载好的mac镜像</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNjZSMEdVY2tFcTFZN0lpY0N4bERvZlRKdEZDaWNaeGZYVjV1QWZIczE0NXlzQzdvOTlXZWN3a2hwY3k0elh5NUhnbmNvRjFvVE5rdmFnLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><p>稍等片刻 等待写入完成</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNjZSMEdVY2tFcTFZN0lpY0N4bERvZlRWVmNLcWpJZWljQUxSaFRNbXNyajJCRFZIcE1aYUF1N2h3b0RYTUI1d0ZlVWVjYWxudUpDWGxRLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><p>(耐心等待 ========，大概需要半个小时左右吧，其实主要看你的U盘读写速度)</p><p>2、这一步很重要！</p><p>将下载的EFI合集中 找到合适你电脑型号的EFI配置文件</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNjZSMEdVY2tFcTFZN0lpY0N4bERvZlRLNEpCUjBwdkJyMmVDVE9qRjNIYU93Q3ZYUENzbjJaS0QyMENpYkswa0VPUTlqbHZtY2NqMWFnLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><p>一定要选好自己的型号，这一步很关键</p><p>下载 解压 会看到有两个文件夹 </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmxjS29jSWU2T3pYYXpXblVBZmZ4QmJpYnl1ckJLVDJNOGVsRTdZSFB6SzFseU04M3JFdEVrOVFBLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><p>将EFI下的两个文件夹复制（！！！千万记住别乱删东西）</p><p>打开分区工具DiskGenius</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNjZSMEdVY2tFcTFZN0lpY0N4bERvZlRVV25NdzRCOUdkZGlhQ2ZJVzVOMzg0UVBIQmpsaGxMaGlhZFI2U3N1aWJGczVJWnBCOVQwWlFEMncvNjQwP3d4X2ZtdD1wbmc?x-oss-process=image/format,png" alt="img"></p><p>mac u盘启动制作完成</p><h3 id="四、修改磁盘"><a href="#四、修改磁盘" class="headerlink" title="四、修改磁盘"></a>四、修改磁盘</h3><p>给苹果系统分一个区出来，内存给大点</p><p>1、删除磁盘所有分区</p><p>点击磁盘，右键删除分区</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmxVc1dMMDV2bFFTVGpwS0U4MUJIQjNtMk1xeG9uUDJXSXZCR3FnVW4yVHlEN1ZKMXpqNlM0bGcvNjQwP3d4X2ZtdD1wbmc?x-oss-process=image/format,png" alt="img"></p><p>2、将分区列表转化为GUID模式</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmxuUG1kV080cEF3OWgwbnRHbUVRc1Y3cXFQdEFwRXg4bDFyMFl3MEFRQ2pHWnI5UVN4Z2ljVGhBLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><p>3、新建EFI分区（最后给400M左右的大小 200M是不够用的 后面安装mac会出错）</p><p>首先点击要分区的硬盘。之后点击新建区分，样式如图所示！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmxlSUJnRklwNm9GazFCRFZQN1NCWjRJTjJjSTFpYlc0TkJnS3A2a0k2QzJwczNIcVdtck1wZ0xBLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><p>之后一路确定</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmx3RGppY0tzeHVFWXplcHR5amhRa1FMOTRoUTNPUFl2M3hhVk1KM0NrU2JWcThqSUZxQzljOW5BLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><p>4.创建MACOS系统的盘</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmwxcU84YVNhUVFlRlI1M1F1ajE4ZlliT0psV1p0aWNDT0tSTkdTNnEzeWp5VkNtaWJOeFZNU1ROdy82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt="img"></p><h3 id="四、安装mac系统"><a href="#四、安装mac系统" class="headerlink" title="四、安装mac系统"></a>四、安装mac系统</h3><p>1、关闭电脑，插入macU盘，启动选择U盘启动(自行百度，型号不同按键不同)</p><p>2、进如引导界面，安装按回车</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmx6REVGWTREa1lJS2lhaWN2VjhBUEhraWJENUs1aWNmWUNvTjNxWHh0M3hkRzRmaWFwdzR4clhHQzJ1Zy82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt="img"></p><p>3、抹掉磁盘</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmx6MUlZQkhzZjJtaWJGTlFRNWpYT3BJaWJ0cW44ckRYSkVWaFlMUzQ5cUJBaDV5Ymd1UDhKeWMwUS82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt="img"></p><p>点击硬盘工具</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmw2VVFLUWZXNU8wYThpYk9PdTVubE5pYnRhSkZGbVlpYmw5bFY3UG9Cb3RpYXEzaWFMZnAwN3RvUE5EZy82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt="img"></p><p>左侧选择灰色咱们之前创建的raw分区，抹掉</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmwxVnpZdVFrY2ZTRTFnUXpaaWJJMTlTSGlheDdqQlJjaERjMTRlc2RxTWxpYlFtcUtQVmxpYjdXOThRLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><p>注意抹掉的磁盘格式 格式一定要选择APFS</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmxuMk05R0VWbHBkcDJoVkNpY0tFeVZ4bXozUGI3U3RTMWRvQmNhdlluMVpWSlNlNnBHY0lZRDZnLzY0MD93eF9mbXQ9cG5n?x-oss-process=image/format,png" alt="img"></p><p>抹掉之后点左上角的× 回到工具界面</p><p>4、安装磁盘</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmw4ZTJuRjdyMXZTWVNkOUVxcHpnczNyeWt5SzdOWW92QzNjaFptU2g2V082TFBncEM0U0FaTFEvNjQwP3d4X2ZtdD1wbmc?x-oss-process=image/format,png" alt="img"></p><p>选择我们刚刚抹掉的磁盘</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmxJMm41RHNMeDVOUlQ0aGljMW5iOE5MTHE0Sld2ekV2NmliM09nanRLaWNFQzJzMzAwcDhPZW52dVEvNjQwP3d4X2ZtdD1wbmc?x-oss-process=image/format,png" alt="img"></p><p>走条 到最后会自动重启电脑</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmx3eTdseGhubFU1ZkRKNk9jbWd5SlVBeDY0OE1mTDZKYUV2UmtBV0xHSFNaZ2NNZXgxZmhJVGcvNjQwP3d4X2ZtdD1wbmc?x-oss-process=image/format,png" alt="img"></p><p>重启后再次进入引导界面会发现多了一个（注意下方英文）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy95SHltVnlhZ0wwNHdjbEF4eGpYUHA5dFYyaWFkTkdPZmxWbXpEdDJNbTdpYWNYRHFnSmVoMHAwUWlhMjNOWmljaWFuRmljT1VBcEEwNFRPZ1F3QXFUMkdnNU9KZy82NDA_d3hfZm10PXBuZw?x-oss-process=image/format,png" alt="img"></p><p>接下来就是耐心等待，基本上到这一步，也算是安装完成80%</p><h3 id="五、将启动引导放到电脑中"><a href="#五、将启动引导放到电脑中" class="headerlink" title="五、将启动引导放到电脑中"></a>五、将启动引导放到电脑中</h3><p>准备工作，需要EasyUEFI、DiskGenius5.2(最新版支持直接拖动文件复制便捷一点)这两个工具</p><p>安装完黑苹果系统后，重启电脑进入Windows系统界面，插上黑苹果启动盘，首先先通过桌面图标“此电脑”进入黑苹果启动盘ESP分区；</p><p><img src="https://pics7.baidu.com/feed/1b4c510fd9f9d72ac643232b3ae99d31349bbb2e.jpeg?token=a3a8f960e9943f86796b4e478f02c8f5&s=C187DC1A073C418818F021DB020080B2" alt="img"></p><p>点击电脑硬盘的ESP分区，再点击浏览文件；</p><p><img src="https://pics3.baidu.com/feed/35a85edf8db1cb13bcc50faa3297e34b93584b20.jpeg?token=00ef6eba9275e5a7ec0b34847ab7c5b1&s=CC46F61E4F7F458C767018C90300C0B3" alt="img"></p><p>点击EFI文件夹，此时将刚才打开没有关闭的U盘的EFI文件夹内的“CLOVER”文件夹直接拖动到DiskGenius软件系统EFI文件夹内；</p><p><img src="https://pics1.baidu.com/feed/a08b87d6277f9e2f2e3f62d6f0f35c21b999f32b.jpeg?token=d91f84df4f96978a58eae4c8d57df587&s=4902F5160B9845C83652E4C90300D0B3" alt="img"></p><p>关闭DiskGenius软件，打开EasyUEFI软件；</p><p><img src="https://pics2.baidu.com/feed/f636afc379310a55ce0d30525a86f6ac832610b0.jpeg?token=c17cf6e0a5425701435aa6f257ecb296&s=9037CC324F6E5109024D10D20000C0B1" alt="img"></p><p>点击“管理EFI启动项”；</p><p><img src="https://pics0.baidu.com/feed/b7003af33a87e9502f64675ffefbe646faf2b4df.jpeg?token=5f538c25ca227bb22a4aa6ca79211c7a&s=D485D41206BE478C1BF02D530300D0BA" alt="img"></p><p>点击第二个带加号的图标；</p><p><img src="https://pics0.baidu.com/feed/377adab44aed2e739769e1a86ac2148e85d6faff.jpeg?token=cac22859e7b78939335fbb45db39d66a&s=D48DD4126CAA760D3ADF415C0200C0BA" alt="img"></p><p>类型选择“Linux或者其它操作系统”，描述填写一个名称，目标分区选择电脑磁盘，最后单击右下角“浏览”；</p><p><img src="https://pics7.baidu.com/feed/dbb44aed2e738bd4f6a5af134e4832d3267ff951.jpeg?token=e0b4a8823ad5bd702ceafb69e11bc807&s=D0C0D41A473F798E12D081DA0200D0B3" alt="img"></p><p>在弹出的窗口中依次点击--EFI-CLOVER文件夹；</p><p><img src="https://pics0.baidu.com/feed/b8014a90f603738df17e329d5dd80554f919eca6.jpeg?token=e5fc18a39153a4c42767f8ce99aa74fe&s=D800D01A5D1F52CE54E121DF0300C0B2" alt="img"></p><p>点击“CLOVERX64.efi”,再点击确定；</p><p><img src="https://pics6.baidu.com/feed/241f95cad1c8a7861a543ad18aca7c3871cf5038.jpeg?token=42a94b93719490d3e832fefb4dbfe30e&s=D900D41248AF77093ADE415C0200C0BA" alt="img"></p><p>点击确定；</p><p><img src="https://pics6.baidu.com/feed/d058ccbf6c81800acceb971447f686ff838b47e3.jpeg?token=46020a7947b22905befc7fa425a104b3&s=D100D512429E47C81AD229530300C0BA" alt="img"></p><p>启动的时候进入引导就行了</p><h3 id="六、遇到的问题"><a href="#六、遇到的问题" class="headerlink" title="六、遇到的问题"></a>六、遇到的问题</h3><p>安装的时候会遇到程序破坏无法安装之类的问题，需要更换镜像文件，或者更改时间，切记不要删除efi文件，不然导致两个系统都崩</p><h3 id="七-、使用感受"><a href="#七-、使用感受" class="headerlink" title="七 、使用感受"></a>七 、使用感受</h3><p>毕竟这东西是黑的，使用感觉肯定没有白苹果好用，只是尝试一下，自己爱折腾，平时办公也是没问题的，优势是比虚拟机安装更加流畅，更加能体会到mac的流畅度，最大的缺点就是不能无线上网，需要外置网卡，还有一个就是显卡，对显卡有强迫症的可以使用10.13可以支持独显，10.14以上不支持，只能核显</p><h3 id="八-、最后"><a href="#八-、最后" class="headerlink" title="八 、最后"></a>八 、最后</h3><p>分享一下文件吧</p><p>镜像文件链接:<a href="https://pan.baidu.com/s/1VubdSrEaa_NAk5PlMI0uqg" target="_blank" rel="noopener">https://pan.baidu.com/s/1VubdSrEaa_NAk5PlMI0uqg</a>  密码:cimi</p><p>工具分享：链接:<a href="https://pan.baidu.com/s/1byscqQk_MbQjVcBcY6XJcw" target="_blank" rel="noopener">https://pan.baidu.com/s/1byscqQk_MbQjVcBcY6XJcw</a>  密码:4p3b</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客优化</title>
      <link href="/2020/03/24/bloggenx/"/>
      <url>/2020/03/24/bloggenx/</url>
      
        <content type="html"><![CDATA[<h2 id="博客优化"><a href="#博客优化" class="headerlink" title="博客优化"></a>博客优化</h2><p>这两天由于前几天手贱把系统efi文件删除，导致电脑崩了也导致了黑苹果系统进不去，一般我都是用黑苹果在写博客，别说了装了两天的系统 ，真是难为我<img src="http://wx2.sinaimg.cn/bmiddle/415f82b9ly1fcme53ocgoj20ku0iqwin.jpg" alt="img"> </p><p>了；</p><h3 id="一、优化"><a href="#一、优化" class="headerlink" title="一、优化"></a>一、优化</h3><p>讲一下这次博客的更新吧，重新部署到了云服务器也完成了备案，这也算是第一次完整的运营一个网站吧，功能方面实现了打赏（虽然没啥人看，没准那天就有人看了呢）同时引入第三方评论系统支持QQ、微信等社交软件的登录与评论；基本优化也就做了这一些</p><h3 id="二、待优化"><a href="#二、待优化" class="headerlink" title="二、待优化"></a>二、待优化</h3><p>1.评论系统更换（这个韩国的还是比较慢，需要更换成国内的）</p><p>2.搭建自己的图床，实现图片保存；</p><p>3.需要新增一个留言板或者文件下载的功能</p><p>暂时需要升级的就是这么多,问题解决了该开始网上冲浪了</p><p><img src="http://ww3.sinaimg.cn/large/9150e4e5gw1fakzbdpsvij205i05imx3.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试题整理（一）</title>
      <link href="/2020/03/18/javamianshi1/"/>
      <url>/2020/03/18/javamianshi1/</url>
      
        <content type="html"><![CDATA[<h2 id="JAVA-面试题整理（一）"><a href="#JAVA-面试题整理（一）" class="headerlink" title="JAVA 面试题整理（一）"></a>JAVA 面试题整理（一）</h2><p><img src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1584521624&di=c6113eac35cace66d3746306e81719a6&src=http://www.hfxms.com.cn/UploadFiles/2018-07-23/15323296433591367.jpg" alt="img"></p><p>整理一些常见面试题</p><p>1.short s1=1,s1=s1+1;有错误吗？short s1=1;s1+=1,有错误吗？</p><p>答：（1）错误，对于short s1=1,s1=s1+1,由于1是int类型，所以s1+1的运算结果也是int类型，需要强制转换类型才能赋值给short型。（2）正确，对于short s1=1;s1+=1;s1+=1相当于 s1=(short)(s1+1);其中包括了强制类型转换，所以可以编译 成功</p><p>2.java有没有goto</p><p>答：有保留关键字，但是用较少</p><p>3.int和integer的区别</p><p>答：int是基本数据类型，Integer是包装数据类型；拓展：Java为每一个原始类型提供了包装数据类型；（自动拆箱自动装箱）</p><p>-原始数据类型：int,boolean,char,byte,short,double,float,long</p><p>-包装数据类型：Boolean,Character,Byte,Short,Integer,Long,Float,Double</p><p>4.&amp;和&amp;&amp;的区别</p><p>答：&amp;是位运算，&amp;&amp;是逻辑 与</p><p>5.解释内存中的栈（Stack）、堆（heap）、和静态区（static area）的用法</p><p>答：栈 new 一个值，堆 定义一个值 静态区内存</p><p>6.Math.round(11.5)等于多少？Math.round(-11.5)等于多少？</p><p>答：12和-11，四舍五入的原理就是在参上加上0.5然后进行向下取整。</p><p>7.swtich是否作用在byte上，是否作用在long上，是否作用在String上？</p><p>答：long,byte不支持，string支持</p><p>8.用最有效率的方法计算2乘以8？</p><p>答：2&lt;&lt;3（左移三位表示乘以的2的3次方右移则表示除以2的3次方）</p><p>9.数组有没有length（）方法？String有没有length()方法？</p><p>答：数组没有length()方法但是有这个属性，String有这个方法</p><p>10.在java中，如何跳出当前的多重嵌套循环</p><p>答：break;</p><p>11.构造器（constructor）是否可以被重写（override）</p><p>答：不可以，构造器不能被继承，因此不能被重写，但可以重载</p><p>12.两个对象值相同（x.equals(y)==true）,但却有不同的  hash code，这句话对不对？</p><p>答：不对，当两个对象满足x.equals(y)==true，它们的哈希码应该是相同的；</p><p>13.是否可以继承String类？</p><p>答：String是final类，不可以被继承。</p><p>14.String和StringBulider,StringBuffer的区别？</p><p>答：JAVA平台提供两种类型的字符串，String和StringBulider、StringBuffer，它们都能储存、操作字符串，其中String只是只读字符串意味着不能被修改，而另外两个可以被修改</p><p>15.重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</p><p>答：（1）方法重载和重写都是实现多态的方式，区别在于重载是在编译时实现多态，重写是运行时候实现多态；（2）重写要求要求子类被重写方法与父类被重写方法有相同的返回类型，重载看参数类型和个数，不看返回类型；</p><p>16.char型变量中能不能储存一个中文汉字，为什么？</p><p>答：可以储存，char类型占2个字节，所以存放一个中文汉字没问题；</p><p>17.抽象类（abstract class）和接口（interface）有什么异同？</p><p>答:（1）抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。（2）声明方法不同（3）字段属性访问权限不同，抽象类可以是各种访问，接口默认是public,static finalI;(4)</p><p>18.静态嵌套类和内部类的不同？</p><p>答：静态类不需要外部堆其进行实例化，内部类必须要外部对其实例化才能实例化</p><p>19.GC是什么为什么要有GC？</p><p>答：垃圾回收机制，防止系统崩溃，提高效率</p><p>20.接口是否可以继承（extends）接口？抽象类是否可以实现（implements）接口？抽象类是否可以继承具体类（concrete class）?</p><p>答：接口可以继承接口，而且支持多重继承。抽象类可以实现接口，抽象类可继承具体类也可以继承抽象类。</p><p>21.java中的final关键字有哪些用法？</p><p>答：修饰类：表示该类不能被继承，修饰方法：表示方法不能被重写。修饰变量：表示变量是常量</p><p>22.Java语音如何进行异常处理，关键字：throws,throw,try,catch,finally分别如何使用？</p><p>答：Java通过面向对象的方法进行异常处理，把不同的异常进行分类，并且提供了良好的接口。</p><p>try:用来指定一块预防所有异常的程序；</p><p>Throws：语句用来明确的抛出一个异常；</p><p>catch:紧跟try块后面，用来指定你想要捕获的异常的类型</p><p>Finally：为确保一段代码不管发生什么异常状况都要被执行</p><p>23（*）.列一些你常见的运行时的异常？</p><p>答：算数异常，类转换异常。非法参数异常，下标越界异常，空指针异常。安全异常；</p><p>24（*）.阐述final，finaly,finalize的区别</p><p>答：final修饰符，有三种修饰用法，finaly通常放在try…catch后面，处理异常用法，finalize是obeject中的方法，在垃圾回收对象钱要调用此方法进行操作；</p><p>25.list,Set,Map是否继承自Conllection接口？</p><p>答:list,set是的，Map不是；</p><p>26（*）阐述ArryList,Vector,LinkenList的储存性能和特性。</p><p>答：ArryList、Vector的底层是数组，Vector线程安全效率低下。LinkenList基于表链，相比ArryList增删块，查询慢；</p><p>27.（*）Collection和Collections的区别？</p><p>答：Collection是一个接口，它是Set,list等容器的父接口；Conllections是工具类，提供一系列的静态方法来辅助容器操作</p><p>28.List,Map,Set三个接口存取元素时，各有什么特点？</p><p>答：list能存放重复元素，Map保存键值对映射，映射关系科颜氏一对多或者是一对一，set不能存放相同元素；</p><p>29.编写多线程程序有几种实现方法？</p><p>答：一种是继承Thread类，另一中是实现Runnable接口</p><p>30.Java中有几种类型的流</p><p>答：字符流和字节流</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>今日暂时学习了解这些面试题目</p><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2541258383,2247312097&fm=26&gp=0.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2020/03/17/docker/"/>
      <url>/2020/03/17/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584460087078&di=993352b74157410f902bb46e43cf6505&imgtype=0&src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-db080a21341c9aa0a7d508e39353531f_1200x500.jpg" alt="img"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html" target="_blank" rel="noopener">Go 语言</a> 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h3 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h3><ul><li><p>Web 应用的自动化打包和发布。</p></li><li><p>自动化测试和持续集成、发布。</p></li><li><p>在服务型环境中部署和调整数据库或其他的后台应用。</p></li><li><p>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</p></li></ul><h3 id="Docker-的优点"><a href="#Docker-的优点" class="headerlink" title="Docker 的优点"></a>Docker 的优点</h3><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><h4 id="1、快速，一致地交付您的应用程序"><a href="#1、快速，一致地交付您的应用程序" class="headerlink" title="1、快速，一致地交付您的应用程序"></a>1、快速，一致地交付您的应用程序</h4><p>Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。</p><p>容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：</p><ul><li>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。</li><li>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。</li><li>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。</li><li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li></ul><h4 id="2、响应式部署和扩展"><a href="#2、响应式部署和扩展" class="headerlink" title="2、响应式部署和扩展"></a>2、响应式部署和扩展</h4><p>Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p><p>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p><h4 id="3、在同一硬件上运行更多工作负载"><a href="#3、在同一硬件上运行更多工作负载" class="headerlink" title="3、在同一硬件上运行更多工作负载"></a>3、在同一硬件上运行更多工作负载</h4><p>Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</p><h2 id="安装及其使用"><a href="#安装及其使用" class="headerlink" title="安装及其使用"></a>安装及其使用</h2><h3 id="CentOs-7"><a href="#CentOs-7" class="headerlink" title="CentOs 7"></a>CentOs 7</h3><p><strong>1.检查内核版本，返回的值大于3.10即可。</strong></p><p> $ uname -r</p><p><img src="https://img-blog.csdn.net/20170629163943864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzY4OTIzNDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><strong>2.使用 sudo 或 root 权限的用户登入终端。</strong></p><p><strong>3.确保yum是最新的</strong></p><p> $ yum update</p><p><strong>4.添加 yum 仓库</strong></p><pre><code class="java">tee /etc/yum.repos.d/docker.repo &lt;&lt;-&#39;EOF&#39;[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF</code></pre><p><img src="https://img-blog.csdn.net/20170629164910967?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzY4OTIzNDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><strong>5.安装 Docker</strong></p><p> $ yum install -y docker-engine</p><p>安装成功后，使用docker version命令查看是否安装成功，安装成功后——如下图</p><p><img src="https://img-blog.csdn.net/20170629165725357?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzY4OTIzNDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><strong>6.启动docker</strong></p><p>$systemctl start docker.service</p><p><strong>7.验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</strong></p><p><strong>使用docker version命令查看</strong></p><p><img src="https://img-blog.csdn.net/20170629170029388?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzY4OTIzNDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><strong>8.设置开机自启动</strong></p><p> $ sudo systemctl enable docker</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客2.0</title>
      <link href="/2020/03/17/hellword/"/>
      <url>/2020/03/17/hellword/</url>
      
        <content type="html"><![CDATA[<h2 id="个人博客2-0"><a href="#个人博客2-0" class="headerlink" title="个人博客2.0"></a>个人博客2.0</h2><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584455651935&di=90bb9c853d36d675dd45b903513ce1ab&imgtype=0&src=http%3A%2F%2Fwx4.sinaimg.cn%2Flarge%2F006m97Kgly1fvo77ncb2pj311s0qojuj.jpg" alt="img"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前几天写个人简历的时候准备写一下自己的项目经验，发现自己项目少的可怜，看到了自己以前的个人博客，说实话以前那博客刚写的时候感觉还可以，看久了感觉十分的low，前几天由于数据库的丢失使我不得不重新再搞一个☝️博客，所以才有了这个博客；顺便附上老版本的博客地址：<a href="http://49.235.232.45" target="_blank" rel="noopener">博客</a>；</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>偶然了解到个人博客有一个Hexo框架，所以特地去了解了一下，步骤基本上很简单，总结一下：</p><ol><li><p>安装Git Bash</p></li><li><p>安装NodeJs</p></li><li><p>安装hexo</p></li><li><p>生成SSH并添加到github</p></li><li><p>部署项目</p></li><li><p>上传到github</p></li><li><p>绑定个人域名</p></li><li><p>修改及配置主题</p></li></ol><h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p>以后的遇见的问题解决之后，记录下来，把自己学的东西记录下来，及时整理；</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
